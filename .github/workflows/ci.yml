name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Upgrade Click to â‰¥8.2
      run: |
        python -m pip install --upgrade pip
        python -m pip install "click>=8.2"  
        
    - name: Install backend dependencies from pyproject.toml
      run: |
        pip install -e .[dev]

    - name: Verify Click version
      run: python -c "import click; print('Click version in CI:', click.__version__)"    

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm install --prefix frontend

    - name: Run Ruff linter
      run: ruff check src tests

    #- name: Run Black formatter check
    #  run: black --check src tests

    #- name: Copy config.yaml into build/lib
    #  run: |
    #    mkdir -p build/lib/src
    #    cp src/config.yaml build/lib/src/config.yaml
    
    - name: Inject config.yaml into build/lib/src
      run: |
        mkdir -p build/lib/src
        cp src/config.yaml build/lib/src/config.yaml

    #- name: Inject market.csv for CLI tests
    #  run: |
    #    mkdir -p src/data
    #    echo -e "Date,sp500,bonds,cpi\n1962-01-02,70.96,4.06,30.04\n1962-01-03,71.13,4.03,30.04" > src/data/market.csv

    #- name: Confirm market.csv contents
    # run: cat src/data/market.csv    

    #- name: Force reinstall Click
    #  run: python -m pip install --force-reinstall "click>=8.2"

    - name: Verify Typer version
      run: python -c "import typer; print('Typer version in CI:', typer.__version__)"
    
    - name: Run backend tests with coverage
      run: |
        PYTHONPATH=$PWD pytest tests/test_cli.py --cov=src --cov-report=xml --log-cli-level=DEBUG

    - name: Run frontend tests
      run: CI=true npm test --prefix frontend -- --watchAll=false

    - name: Build Docker images
      run: docker compose build

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/retirement-engine-backend:latest

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Dockerfile.frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/retirement-engine-frontend:latest

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ~/retirement-engine
          git pull
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
          test -f .env && echo ".env found" || echo "Missing .env"
          docker compose pull
          docker compose up -d --build --remove-orphans