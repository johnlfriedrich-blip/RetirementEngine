name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Upgrade pip and Click
        run: |
          python -m pip install --upgrade pip
          python -m pip install "click>=8.2"

      - name: Install backend dependencies
        run: |
          pip install -e .[dev]

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm install --prefix frontend

      - name: Run Ruff linter
        run: ruff check src tests

      - name: Inject config.yaml into build/lib/src
        run: |
          mkdir -p build/lib/src
          cp src/config.yaml build/lib/src/config.yaml

      - name: Run backend tests with coverage
        env:
          US_EQUITIES_WEIGHT: "0.3333"
          INTL_EQUITIES_WEIGHT: "0.3333"
          FIXED_INCOME_WEIGHT: "0.3334"
        run: |
          PYTHONPATH=$PWD pytest tests --cov=src --cov-report=xml --log-cli-level=DEBUG

      - name: Run frontend tests
        run: CI=true npm test --prefix frontend -- --watchAll=false

      - name: Build Docker images
        run: docker compose build

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/retirement-engine-backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/retirement-engine-frontend:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ~/retirement-engine
            git pull
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
            test -f .env && echo ".env found" || echo "Missing .env"
            docker compose pull
            docker compose up -d --build --remove-orphans